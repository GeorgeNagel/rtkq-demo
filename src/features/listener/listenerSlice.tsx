import {
  createAsyncThunk,
  createSlice,
  current,
  PayloadAction,
} from "@reduxjs/toolkit"
import { RootState, AppThunk } from "src/app/store"

const noteNames = ["C", "D", "E", "F", "G", "A", "B"]
const frequencies = {
  C: 128.43,
  D: 144.16,
  E: 161.82,
  F: 171.44,
  G: 192.43,
  A: 216.0,
  B: 242.45,
}

export interface ListenerState {
  index: number
  noteName: string
  frequency: number
}

const initialState: ListenerState = {
  index: 0,
  noteName: "E",
  frequency: 161.82,
}

export const incrementIndexAsync = createAsyncThunk(
  "listener/incrementIndex",
  async (currentIndex: number) => {
    const response = await new Promise<{ index: number }>((resolve) =>
      setTimeout(
        () => resolve({ index: (currentIndex + 1) % noteNames.length }),
        1000,
      ),
    )
    // The value we return becomes the `fulfilled` action payload
    return response.index
  },
)

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1
    },
    decrement: (state) => {
      state.value -= 1
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = "idle"
        state.value += action.payload
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const { increment, decrement, incrementByAmount } = counterSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState())
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount))
    }
  }

export default counterSlice.reducer
